// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid()) // auto-inc
  name            String
  email           String         @unique // should be unique
  phone           String?
  password        String
  avatar          String?
  designation     String?
  dateOfBirth     DateTime?
  institute       String?
  degree          String?
  starting        DateTime?
  ending          DateTime?
  profDevPlan     Bytes?
  role            Role
  campus          Campus
  department      Department
  facultyrequests ObsRequests[]  @relation("Faculty")
  hodrequests     ObsRequests[]  @relation("Hod")
  facultyObs      Observations[] @relation("Faculty")
  hodObs          Observations[] @relation("Hod")
  ObserverObs     Observations[] @relation("Observer")
  facultyCourses  Courses[]      @relation("Faculty")
  hodCourses      Courses[]      @relation("Hod")

  @@index([email]) // sorting
}

model ObsRequests {
  id           String  @id @default(uuid()) // auto-inc
  faculty      User    @relation("Faculty", fields: [facultyId], references: [id])
  facultyId    String
  hod          User    @relation("Hod", fields: [hodId], references: [id])
  hodId        String
  message      String
  teachingPlan String
  course       Courses @relation(fields: [coursesId], references: [id])
  coursesId    String
}

model Observations {
  id                  String     @id @default(uuid()) // auto-inc
  faculty             User       @relation("Faculty", fields: [facultyId], references: [id])
  facultyId           String
  hod                 User       @relation("Hod", fields: [hodId], references: [id])
  hodId               String
  observer            User       @relation("Observer", fields: [observerId], references: [id])
  observerId          String
  timeSlot            DateTime?
  course              Courses    @relation(fields: [coursesId], references: [id])
  coursesId           String
  observationStatus   Boolean    @default(false)
  observationProgress Int        @default(0)
  meeting             Meetings[]
}

model Courses {
  id           String         @id @default(uuid()) // auto-inc
  courseName   String
  faculty      User           @relation("Faculty", fields: [facultyId], references: [id])
  facultyId    String
  hod          User           @relation("Hod", fields: [hodId], references: [id])
  hodId        String
  department   Department
  Observations Observations[]
  ObsRequests  ObsRequests[]
}

model Meetings {
  id              String       @id @default(uuid()) // auto-inc
  observervation  Observations @relation(fields: [observationsId], references: [id])
  observationsId  String
  meetingName     String       @default("Pre-Obs") //default Pre Observation
  meetingFeedback FeedBacks[]
  meetingScore    Int          @default(0)
  rubric          Bytes // image file bytes
}

model FeedBacks {
  id        String   @id @default(uuid()) // auto-inc
  meeting   Meetings @relation(fields: [meetingId], references: [id])
  meetingId String
}

enum Role {
  Admin
  Campus_Director
  Head_of_Department
  Faculty
  Observer
}

enum Department {
  Fest
  Aifd
  Media
  Business
}

enum Campus {
  Main_Campus
  Gulshan_Campus
  North_Campus
  Airport_Campus
  Bahria_Campus
  Islamabad_Campus
}
