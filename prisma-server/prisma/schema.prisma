// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// -> User => Observations || => Courses || => Feedbacks || => Messages
model User {
    id                  Int            @id @default(autoincrement()) // auto-inc
    name                String
    email               String
    phone               String?
    password            String
    avatar              String?
    designation         String?
    dateOfBirth         String?
    institute           String?
    degree              String?
    starting            DateTime?
    ending              DateTime?
    role                Role
    campus              Campus
    department          Department
    //observations
    facultyObs          Observations[] @relation("Faculty")
    hodObs              Observations[] @relation("Hod")
    observerObs         Observations[] @relation("Observer")
    //courses
    courseSlots         CourseSlots[]
    // observerCourses  Courses[]      @relation("Observer")
    //feedbacks
    feedbackAuthor      FeedBacks[]    @relation("Author")
    feedbackReceiver    FeedBacks[]    @relation("Receiver")
    //messages
    messageSender       Messages[]     @relation("Sender")
    messageReceiver     Messages[]     @relation("Receiver")
    //reasons
    reasonSender        ObsReasons[]   @relation("Sender")
    reasonReceiver      ObsReasons[]   @relation("Receiver")
    //templates
    TemplatePlansFilled TemplatePlan[] @relation("Filled")
    TemplatePlansEdit   TemplatePlan[] @relation("Edited")
}

// -> User => Observations
model Observations {
    id                  Int            @id @default(autoincrement()) // auto-inc
    starting            DateTime?
    ending              DateTime?
    observationStatus   Status         @default(Pending)
    observationProgress Int            @default(0)
    semester            String
    observationScore    Int            @default(0)
    faculty             User           @relation("Faculty", fields: [facultyId], references: [id])
    facultyId           Int
    hod                 User           @relation("Hod", fields: [hodId], references: [id])
    hodId               Int
    observer            User           @relation("Observer", fields: [observerId], references: [id])
    observerId          Int
    obsRequest          ObsScheduling?
    meetings            Meetings?
    course              Courses?       @relation(fields: [courseId], references: [id])
    courseId            Int?
    feedbacks           FeedBacks[]
    createdAt           DateTime       @default(now())
}

// -> Observations => ObsScheduling
model ObsScheduling {
    id                 Int            @id @default(autoincrement()) // auto-inc
    timeSlotsByFaculty CourseSlots[]  @relation("Faculty")
    timeSlotByObserver CourseSlots[]  @relation("Observer")
    scheduledOn        DateTime?
    status             Status         @default(Ongoing)
    observation        Observations   @relation(fields: [observationsId], references: [id])
    observationsId     Int            @unique
    facultyAccepted    Boolean        @default(false)
    observerAccepted   Boolean        @default(false)
    reasons            ObsReasons[]
    teachingPlan       TemplatePlan[]
}

//-> Observation -> ObsScheduling -> ObsReasons
model ObsReasons {
    id           Int            @id @default(autoincrement())
    reason       String
    sender       User?          @relation("Sender", fields: [senderId], references: [id])
    senderId     Int?
    receiver     User?          @relation("Receiver", fields: [receiverId], references: [id])
    receiverId   Int?
    scheduling   ObsScheduling? @relation(fields: [schedulingId], references: [id])
    schedulingId Int?
    timeStamp    DateTime       @default(now())
}

// -> Observations => Meetings
model Meetings {
    id                    Int          @id @default(autoincrement()) // auto-inc 
    informedObservation   Informed?
    postObservation       Post?
    uninformedObservation Uninformed?
    professionalDPlan     PDP?
    observation           Observations @relation(fields: [observationsId], references: [id])
    observationsId        Int          @unique
}

// -> Meetings => Informed/Post/Uninformed/PDP
model Informed {
    id         Int      @id @default(autoincrement()) // auto-inc
    finalScore Int?     @default(0)
    savedScore Int?     @default(0)
    status     Status   @default(Ongoing)
    meeting    Meetings @relation(fields: [meetingId], references: [id])
    meetingId  Int      @unique
    rubrics    Rubric[]
}

model Rubric {
    id            Int      @id @default(autoincrement())
    title         String
    code          String
    observerScore Int
    facultyScore  Int
    informed      Informed @relation(fields: [informedId], references: [id])
    informedId    Int
}

model Post {
    id        Int      @id @default(autoincrement()) // auto-inc
    status    Status   @default(Ongoing)
    meeting   Meetings @relation(fields: [meetingId], references: [id])
    meetingId Int      @unique
}

model Uninformed {
    id        Int      @id @default(autoincrement()) // auto-inc
    status    Status   @default(Ongoing)
    meeting   Meetings @relation(fields: [meetingId], references: [id])
    meetingId Int      @unique
}

model PDP {
    id        Int      @id @default(autoincrement()) // auto-inc
    pdpDoc    String
    meeting   Meetings @relation(fields: [meetingId], references: [id])
    meetingId Int      @unique
}

// -> User => Courses
model Courses {
    id              Int            @id @default(autoincrement()) // auto-inc
    courseCode      String
    name            String
    department      Department
    campus          Campus
    isElective      Boolean        @default(false)
    isDepthElective Boolean        @default(false)
    credits         Int
    slots           CourseSlots[]
    observations    Observations[]
}

model CourseSlots {
    id            Int            @id @default(autoincrement()) // auto-inc
    sectionCode   String
    time          String
    location      String
    day           String
    course        Courses        @relation(fields: [courseId], references: [id])
    courseId      Int
    faculty       User?          @relation(fields: [facultyId], references: [id])
    facultyId     Int?
    facultyObs    ObsScheduling? @relation("Faculty", fields: [facultyobsId], references: [id])
    facultyobsId  Int?
    observerObs   ObsScheduling? @relation("Observer", fields: [observerObsId], references: [id])
    observerObsId Int?
}

// -> User => Feedbacks
model FeedBacks {
    id            Int          @id @default(autoincrement()) // auto-inc
    comment       String
    author        User?        @relation("Author", fields: [authorId], references: [id])
    authorId      Int?
    receiver      User?        @relation("Receiver", fields: [receiverId], references: [id])
    receiverId    Int?
    observation   Observations @relation(fields: [observationId], references: [id])
    observationId Int
    timeStamp     DateTime     @default(now())
}

// -> User => Messages
model Messages {
    id         Int      @id @default(autoincrement()) // auto-inc
    message    String
    sender     User?    @relation("Sender", fields: [senderId], references: [id])
    senderId   Int?
    receiver   User?    @relation("Receiver", fields: [receiverId], references: [id])
    receiverId Int?
    timeStamp  DateTime @default(now())
}

// -> User => Scheduling => Template
model TemplatePlan {
    id              Int                @id @default(autoincrement()) // auto-inc
    steps           TemplatePlanStep[]
    type            TemplateType       @default(Teaching)
    assignedTo      User?              @relation("Filled", fields: [assignedId], references: [id])
    assignedId      Int?
    editedBy        User?              @relation("Edited", fields: [editedById], references: [id])
    editedById      Int?
    schedulingT     ObsScheduling?     @relation(fields: [obsSchedulingId], references: [id])
    obsSchedulingId Int?
}

model TemplatePlanStep {
    id             Int           @id @default(autoincrement())
    field          String
    name           String
    response       String?
    TemplatePlan   TemplatePlan? @relation(fields: [templatePlanId], references: [id])
    templatePlanId Int?
}

// enums
enum Role {
    Super_Admin
    Dean
    Campus_Director
    Head_of_Department
    Faculty
    Observer
}

enum Department {
    Computer_Science
    Software_Engineering
    Business_Accounting
    Business_Adminitration
    Animation
    Film_and_TV
}

enum Specialization {
    Fest
    BBA
    Media_Studies
}

enum Campus {
    Main_Campus
    Gulshan_Campus
    North_Campus
    Airport_Campus
    Bahria_Campus
    Islamabad_Campus
}

enum Status {
    Pending
    Ongoing
    Completed
    Draft
}

enum Semester {
    Fall
    Spring
    Summer
}

enum TemplateType {
    Teaching
    Reflection
    Artifacts
}
